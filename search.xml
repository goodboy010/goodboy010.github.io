<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo卸载4</title>
      <link href="/posts/1719a26b.html"/>
      <url>/posts/1719a26b.html</url>
      
        <content type="html"><![CDATA[<h3 id="在Windows系统中："><a href="#在Windows系统中：" class="headerlink" title="在Windows系统中："></a>在Windows系统中：</h3><ol><li>打开命令提示符（CMD）或PowerShell。</li><li>卸载Hexo全局模块： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g hexo</span><br></pre></td></tr></table></figure></li><li>如果你想要删除Hexo的项目文件夹，可以手动删除你创建的Hexo项目目录。</li></ol><h3 id="清理残留文件："><a href="#清理残留文件：" class="headerlink" title="清理残留文件："></a>清理残留文件：</h3><p>如果你想要彻底清理Hexo，可能还需要删除node_modules文件夹和<code>package-lock.json</code>文件（如果你在项目中使用了npm）：</p><ol><li>进入你的Hexo项目目录。</li><li>删除<code>node_modules</code>文件夹：    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf node_modules</span><br></pre></td></tr></table></figure></li><li>删除<code>package-lock.json</code>文件： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> package-lock.json</span><br></pre></td></tr></table></figure>请注意，这些步骤将从你的系统中移除Hexo，但不会删除你的博客文章和数据。如果你的博客文章存储在Hexo项目目录中，确保在卸载之前备份这些文件。如果你使用的是外部服务（如GitHub Pages）来托管静态文件，那么这些文件应该是安全的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo自动化部署以及部署qexo3</title>
      <link href="/posts/3beddf31.html"/>
      <url>/posts/3beddf31.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、配置-GitHub-自动化部署"><a href="#一、配置-GitHub-自动化部署" class="headerlink" title="一、配置 GitHub 自动化部署"></a>一、配置 GitHub 自动化部署</h1><h2 id="1-获取-GitHub-Token"><a href="#1-获取-GitHub-Token" class="headerlink" title="1. 获取 GitHub Token"></a><a href="https://www.limin.studio/2024/11/24/wzbk4/#1-%E8%8E%B7%E5%8F%96-GitHub-Token" title="1. 获取 GitHub Token"></a>1. 获取 GitHub Token</h2><ol><li>打开 <strong>Personal settings</strong> -&gt; <strong>Developer settings</strong> -&gt; <strong>Personal access tokens</strong></li><li>设置权限为 <strong>repo</strong> 和 <strong>public repo</strong></li></ol><p><a href="https://13fe9ff.webp.li/2024/11/313f2ca0d7d3ea811d7e7be8ad6bcd4b.png"><img src="https://13fe9ff.webp.li/2024/11/313f2ca0d7d3ea811d7e7be8ad6bcd4b.png" alt="图示1"></a><br>3. 保存生成的 Token如（ghp_1Y7FpPnoCPlSqHPmTPbntYi3PJtdkbD2gV7jo）<br>4. 在博客代码仓库的 <strong>Secrets</strong> 中添加名为 <strong>PERSONAL_TOKEN</strong> 的变量，后续步骤将用到。<br><a href="https://13fe9ff.webp.li/2024/11/f69e8dd9266ba1336ddddff00a67ffc6.png"><img src="https://13fe9ff.webp.li/2024/11/f69e8dd9266ba1336ddddff00a67ffc6.png"></a></p><h2 id="2-创建-GitHub-Actions"><a href="#2-创建-GitHub-Actions" class="headerlink" title="2. 创建 GitHub Actions"></a>2. 创建 GitHub Actions</h2><ol><li>在博客仓库页面，点击 <strong>Actions</strong>。</li><li>选择 <strong>Set up a workflow yourself</strong>。<br><a href="https://13fe9ff.webp.li/2024/11/b425061c44375abea8ca5a8a01091038.png"><img src="https://13fe9ff.webp.li/2024/11/b425061c44375abea8ca5a8a01091038.png"></a></li><li>输入以下 YAML 配置并点击 <strong>Start commit</strong> ：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">name: 自动部署</span><br><span class="line"># 当有改动推送到master分支时，启动Action</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">      #2020年10月后github新建仓库默认分支改为main，注意更改</span><br><span class="line">  release:</span><br><span class="line">    types:</span><br><span class="line">      - published</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: 检查分支</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          ref: main</span><br><span class="line"></span><br><span class="line">      - name: 安装 Node</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &quot;23&quot;</span><br><span class="line"></span><br><span class="line">      - name: 安装 Hexo</span><br><span class="line">        run: |</span><br><span class="line">          export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">      - name: 缓存 Hexo</span><br><span class="line">        id: cache-npm</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        env:</span><br><span class="line">          cache-name: cache-node-modules</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">      - name: 安装依赖</span><br><span class="line">        if: $&#123;&#123; steps.cache-npm.outputs.cache-hit != &#x27;true&#x27; &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          npm install --save</span><br><span class="line"></span><br><span class="line">      - name: 生成静态文件</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate</span><br><span class="line"></span><br><span class="line">      - name: 部署到Github</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@v4</span><br><span class="line">        with:</span><br><span class="line">          token: ghp_ZFuGe3rmUbea1uqI7jjwAyRYXSKjk83kOX6啊</span><br><span class="line">          repository-name: goodboy010/goodboy010.github.io</span><br><span class="line">          branch: main</span><br><span class="line">          folder: public</span><br><span class="line">          commit-message: &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; Updated By Github Actions&quot;</span><br></pre></td></tr></table></figure><p>参考文档：</p><ul><li><a href="https://www.oplog.cn/archives/24998.html">Hexo 自动化部署教程</a></li><li><a href="https://hackergavin.com/2024/01/11/hexo-automate-deploy/">利用 GitHub Actions 实现自动化部署 Hexo 到 Github Pages</a></li></ul><h1 id="二、通过-Vercel-部署-Qexo"><a href="#二、通过-Vercel-部署-Qexo" class="headerlink" title="二、通过 Vercel 部署 Qexo"></a>二、通过 Vercel 部署 Qexo</h1><h2 id="1-一键部署"><a href="#1-一键部署" class="headerlink" title="1. 一键部署"></a>1. 一键部署</h2><p>点击以下按钮完成一键部署：<a href="https://vercel.com/new/clone?repository-url=https://github.com/am-abudu/Qexo">Vercel 一键部署</a></p><blockquote><p><strong>注意</strong>：首次部署可能会出现错误提示，可忽略并继续后续步骤。</p></blockquote><h2 id="2-修改-Node-js-版本"><a href="#2-修改-Node-js-版本" class="headerlink" title="2. 修改 Node.js 版本"></a><a href="https://www.limin.studio/2024/11/24/wzbk4/#2-%E4%BF%AE%E6%94%B9-Node-js-%E7%89%88%E6%9C%AC" title="2. 修改 Node.js 版本"></a>2. 修改 Node.js 版本</h2><p>由于 <strong><a href="https://vercel.com/docs/functions/runtimes/python#python-dependencies">Vercel 的已知问题</a>，需将项目的 Node.js 版本调整为</strong> <strong>18.x</strong>。<br>路径：<strong>Settings -&gt; General -&gt; Node.js Version</strong></p><h2 id="3-创建-Vercel-数据库"><a href="#3-创建-Vercel-数据库" class="headerlink" title="3. 创建 Vercel 数据库"></a><a href="https://www.limin.studio/2024/11/24/wzbk4/#3-%E5%88%9B%E5%BB%BA-Vercel-%E6%95%B0%E6%8D%AE%E5%BA%93" title="3. 创建 Vercel 数据库"></a>3. 创建 Vercel 数据库</h2><ol><li>进入<a href="https://vercel.com/dashboard/stores">Vercel Storage 页面</a>。</li><li>点击 *<strong>Create Database</strong>，选择 <strong>Neon</strong> ，设置区域为 <strong>Washington, DC., USA - iad1</strong>，创建免费数据库。</li></ol><h2 id="4-绑定项目"><a href="#4-绑定项目" class="headerlink" title="4. 绑定项目"></a><a href="https://www.limin.studio/2024/11/24/wzbk4/#4-%E7%BB%91%E5%AE%9A%E9%A1%B9%E7%9B%AE" title="4. 绑定项目"></a>4. 绑定项目</h2><p>在 <strong>Projects</strong> 页面选择对应项目，点击 <strong>Connect Project</strong> 进行绑定。</p><h2 id="5-部署-Qexo"><a href="#5-部署-Qexo" class="headerlink" title="5. 部署 Qexo"></a><a href="https://www.limin.studio/2024/11/24/wzbk4/#5-%E9%83%A8%E7%BD%B2-Qexo" title="5. 部署 Qexo"></a>5. 部署 Qexo</h2><p>回到项目页面，点击<strong>Redeploy</strong> 开始部署。部署完成后，无报错即可访问域名进入初始化页面。</p><h1 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h1><p><a href="https://13fe9ff.webp.li/2024/11/d14a6a28fa42dc905ad1f9572d280abb.png"><img src="https://13fe9ff.webp.li/2024/11/d14a6a28fa42dc905ad1f9572d280abb.png"></a><br><a href="https://13fe9ff.webp.li/2024/11/8781b5e062a34509ccf39ed0000e8033.png"><img src="https://13fe9ff.webp.li/2024/11/8781b5e062a34509ccf39ed0000e8033.png"></a></p><h2 id="GitHub-配置"><a href="#GitHub-配置" class="headerlink" title="GitHub 配置"></a>GitHub 配置</h2><p><a href="https://13fe9ff.webp.li/2024/11/7f4e9a472b66f4a2b73ae1c8e035b4ef.png"><img src="https://13fe9ff.webp.li/2024/11/7f4e9a472b66f4a2b73ae1c8e035b4ef.png"></a><br>填写博客源码所在仓库的分支名称，例如：<code>main</code></p><h2 id="GitHub-密钥"><a href="#GitHub-密钥" class="headerlink" title="GitHub 密钥"></a>GitHub 密钥</h2><p>填写生成的 GitHub Token，例如：<code>ghp_1Y7FpPnoCPlSqHPmTPbntYi3PJtdkbD2gV7jo</code></p><h2 id="仓库路径"><a href="#仓库路径" class="headerlink" title="仓库路径"></a>仓库路径</h2><p>例如：<code>goodboy/goodboy.github.io</code><br>若 Hexo 源码在仓库根目录，则留空；否则填写路径：<code>path/</code><br><a href="https://13fe9ff.webp.li/2024/11/f2f7c6b57196afa6652292807698db91.png"><img src="https://13fe9ff.webp.li/2024/11/f2f7c6b57196afa6652292807698db91.png"></a></p><p>项目分支：例如<code>main</code><br><a href="https://13fe9ff.webp.li/2024/11/5e4c876cd000a6d5f5da45bb256c963e.png"><img src="https://13fe9ff.webp.li/2024/11/5e4c876cd000a6d5f5da45bb256c963e.png"></a><br><a href="https://13fe9ff.webp.li/2024/11/bcc3ab289c7a355ed8116d92faddba80.png"><img src="https://13fe9ff.webp.li/2024/11/bcc3ab289c7a355ed8116d92faddba80.png"></a></p><h2 id="Vercel-配置"><a href="#Vercel-配置" class="headerlink" title="Vercel 配置"></a>Vercel 配置</h2><ul><li><strong>VERCEL_TOKEN</strong>：在<a href="https://vercel.com/account/tokens">Vercel 账户设置</a> 中生成。如：<code>UoS34hKez6sOsMfl8vos8uL7</code></li><li><strong>PROJECT_ID</strong>：在 <strong>Project Settings -&gt; General -&gt; Project ID</strong> 中找到。如：<code>prj_jIoKAB7of6GQ9GrYEGb3s25Dwyuh</code></li></ul><p>配置完成后，即可登录后台管理博客内容。<br><a href="https://13fe9ff.webp.li/2024/11/df6b8e762d048854683e5e31f6e262f2.png"><img src="https://13fe9ff.webp.li/2024/11/df6b8e762d048854683e5e31f6e262f2.png"></a><br><a href="https://13fe9ff.webp.li/2024/11/2fa7cd4b16b469345b8e628d88affae2.png"><img src="https://13fe9ff.webp.li/2024/11/2fa7cd4b16b469345b8e628d88affae2.png"></a><br><a href="https://13fe9ff.webp.li/2024/11/6a16b8185a435cf9b807dbcc894d92e1.png"><img src="https://13fe9ff.webp.li/2024/11/6a16b8185a435cf9b807dbcc894d92e1.png"></a></p><h1 id="图床配置教程"><a href="#图床配置教程" class="headerlink" title="图床配置教程"></a>图床配置教程</h1><p>详见视频教程：<a href="https://youtu.be/ah5szwr4JxM?si=SxPGuN6AyZ1jv8eS">观看视频</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署Github2</title>
      <link href="/posts/10021974.html"/>
      <url>/posts/10021974.html</url>
      
        <content type="html"><![CDATA[<p>安装 hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="部署前置步骤"><a href="#部署前置步骤" class="headerlink" title="部署前置步骤"></a>部署前置步骤</h2><p>一、注册 Github 账户：点击此处访问 <a href="https://github.com/">Github 官网</a>，点击 Sign Up 注册账户</p><p>二、创建项目代码库：点击 New repository 开始创建，步骤及注意事项见图：<br><a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/12.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/12.png"></a><br><a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/13.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/13.png"></a><br>三、配置 <code>SSH</code> 密钥：只有配置好 <code>SSH</code> 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：<code>F\QiQi_Blog</code>） <code>Git Bash Here</code> 输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email@example.com&quot;  </span><br><span class="line">//引号里面填写你的邮箱地址，比如我的是413791664@qq.com</span><br></pre></td></tr></table></figure><p>之后会出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.  </span><br><span class="line">Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):  </span><br><span class="line">//到这里可以直接回车将密钥按默认文件进行存储</span><br></pre></td></tr></table></figure><p>然后会出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):  </span><br><span class="line">//这里是要你输入密码，其实不需要输什么密码，直接回车就行  </span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>接下来屏幕会显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.  </span><br><span class="line">Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.  </span><br><span class="line">The key fingerprint is:  </span><br><span class="line">这里是各种字母数字组成的字符串，结尾是你的邮箱  </span><br><span class="line">The key&#x27;s randomart image is:  </span><br><span class="line">这里也是各种字母数字符号组成的字符串</span><br></pre></td></tr></table></figure><p>运行以下命令，将公钥的内容复制到系统粘贴板上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>四、在 GitHub 账户中添加你的公钥<br>1.登陆 GitHub，进入 <code>Settings</code>：<br><a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/14.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/14.png"></a><br>2.点击 <code>SSH and GPG Keys</code>：<br><a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/15.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/15.png"></a><br>3.选择 New SSH key：<br><a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/16.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/16.png"></a><br>4.粘贴密钥：<br><a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/17.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/17.png"></a><br>五、测试<br>直接在桌面右键 点击 Git Bash Here，输入以下命令输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>六、配置 Git 个人信息<br>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;此处填你的用户名&quot;  </span><br><span class="line">git config --global user.email &quot;此处填你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p>]]></content>
      
      
      <categories>
          
          <category> hexo系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建1</title>
      <link href="/posts/6611e2c5.html"/>
      <url>/posts/6611e2c5.html</url>
      
        <content type="html"><![CDATA[<p>1.安装<a href="https://nodejs.org/en/download/">Node.js 官网</a><br>2.安装<a href="https://git-scm.com/downloads">Git 官网</a></p><h2 id="检验软件是否安装成功"><a href="#检验软件是否安装成功" class="headerlink" title="检验软件是否安装成功"></a>检验软件是否安装成功</h2><p>修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>同时按下 Win 键和 R 键打开运行窗口,输入 <code>cmd</code> ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version  </span><br><span class="line">node -v  </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：F\Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装,第一次可能需要久一点输入命令后等一等，再输入第二条命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>这个命令表示安装 hexo 的脚手架，如图所示即为安装成功<a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/7.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/7.png"></a></p><h2 id="Hexo-初始化配置如："><a href="#Hexo-初始化配置如：" class="headerlink" title="Hexo 初始化配置如："></a>Hexo 初始化配置如：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:goodboy010/goodboy010.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>第一个命令，如图所示则安装成功如果失败了就再输入一次，<del>比如说我就错了</del> ，第二个命令表示安装 hexo 部署到 git page 的 deployer<br><a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/8.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/8.png"></a><br>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：<br><a href="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/9.png"><img src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/blog-construct/9.png"></a></p><h2 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h2><p>执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>执行完即可登录 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果</p>]]></content>
      
      
      <categories>
          
          <category> hexo系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客笔记写作</title>
      <link href="/posts/ea687187.html"/>
      <url>/posts/ea687187.html</url>
      
        <content type="html"><![CDATA[<h1 id="写作命令"><a href="#写作命令" class="headerlink" title="写作命令"></a>写作命令</h1><p><code>hexo n &quot;文章标题&quot;</code></p><h2 id="Page-Front-matter-用于-页面-配置"><a href="#Page-Front-matter-用于-页面-配置" class="headerlink" title="Page Front-matter 用于 页面 配置"></a>Page Front-matter 用于 <code>页面</code> 配置</h2><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块 (默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的<code>音乐</code> 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true&#x2F;false) (默认为设置中 highlight_shrink 的配置)</td></tr><tr><td>random</td><td>【可选】配置友情链接是否随机排序（默认为 false）</td></tr><tr><td>limit</td><td>【可选】配置説説显示数量</td></tr><tr><td>limit.type</td><td>【可选】配置説説显示数量的类型 （date 或者 num）</td></tr><tr><td>limit.value</td><td>【可选】配置説説显示数量的值</td></tr></tbody></table><h1 id="Post-Front-matter-用于-文章页-配置"><a href="#Post-Front-matter-用于-文章页-配置" class="headerlink" title="Post Front-matter 用于 文章页 配置"></a>Post Front-matter 用于 <code>文章页</code> 配置</h1><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)</td></tr><tr><td>toc_number</td><td>【可选】显示 toc_number(默认为设置中 toc 的 number 配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的<code>文章作者</code></td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的<code>文章作者</code>链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的<code>文章连结</code>链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的<code>版权声明</code>文字</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false )</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false )</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的<code>音乐</code> 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>abcjs</td><td>【可选】加载 abcjs (当设置 abcjs 的 per_page: false 时，才需要配置，默认 false )</td></tr><tr><td>noticeOutdate</td><td>【可选】文章过期提醒 (默认为设置中 noticeOutdate 的 enable 配置)</td></tr></tbody></table><p>写作结束</p>]]></content>
      
      
      <categories>
          
          <category> hexo系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加速方法</title>
      <link href="/posts/d9e3a07d.html"/>
      <url>/posts/d9e3a07d.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>官方下载地址：<a href="https://steampp.net/">瓦特工具箱(Steam++官网) - Watt Toolkit</a></p></li><li><p>开源仓库：<a href="https://kkgithub.com/521xueweihan/GitHub520">521xueweihan&#x2F;GitHub520: :kissing_heart: 让你“爱”上 GitHub，解决访问时图裂、加载慢的问题。（无需安装）</a></p></li><li><p>Xbox下载加速器：<a href="https://kkgithub.com/skydevil88/XboxDownload">skydevil88&#x2F;XboxDownload: Xbox下载助手，支持Xbox、微软商店、PS、NS、EA app &amp; Origin、战网、Epic、育碧、Riot Games下载加速，修复Steam商店社区、GitHub访问。</a></p></li><li><p>一行命令上GitHub的仓库： <a href="https://kkgithub.com/feng2208/github-hosts">feng2208&#x2F;github-hosts: 加速github，听spotify无限切歌。</a></p></li><li><p>在GitHub前面加kk即可访问：<a href="https://kkgithub.com/">github主页</a></p></li><li><p><a href="https://github.com/SpaceTimee/Sheas-Cealer">SpaceTimee&#x2F;Sheas-Cealer: Just Ceal It (可用于无代理合法抵御网络监听和开展网络研究)</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 节点 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
